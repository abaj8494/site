<script>
document.addEventListener("DOMContentLoaded", function() {
  // Disable on mobile devices
  if (window.innerWidth < 768) return;

  // Get the SVG overlay element.
  const svg = document.getElementById("arrow-svg");
  const svgNS = "http://www.w3.org/2000/svg";

  // Create a <defs> element with an arrowhead marker.
  const defs = document.createElementNS(svgNS, "defs");
  const marker = document.createElementNS(svgNS, "marker");
  marker.setAttribute("id", "arrowhead");
  marker.setAttribute("markerWidth", "10");
  marker.setAttribute("markerHeight", "7");
  marker.setAttribute("refX", "0");
  marker.setAttribute("refY", "3.5");
  marker.setAttribute("orient", "auto");

  const polygon = document.createElementNS(svgNS, "polygon");
  polygon.setAttribute("points", "0 0, 10 3.5, 0 7");
  polygon.setAttribute("fill", "#000"); // adjust arrow color as needed

  marker.appendChild(polygon);
  defs.appendChild(marker);
  svg.appendChild(defs);

  // Get the Navigation heading element.
  // If you changed the id to "nav-heading", use that.
  const navHeading = document.getElementById("nav-heading"); // or document.getElementById("headline-2")
  if (!navHeading) {
    console.error("Navigation heading not found – please add id='nav-heading' to your Navigation heading.");
    return;
  }
  const navRect = navHeading.getBoundingClientRect();
  // Use the bottom center of the heading as the starting point.
  const startX = navRect.left + navRect.width / 2;
  const startY = navRect.top + navRect.height;

  // Define an array of target selectors for the header nav links.
  // (Make sure these selectors match the href values in your header.)
  const targets = [
    { selector: 'nav#menu a[href="/projects"]' },
    { selector: 'nav#menu a[href="/blog/"]' },
    { selector: 'nav#menu a[href="/about/"]' },
    { selector: 'nav#menu a[href="/resources/"]' }
  ];

  targets.forEach(function(target) {
    const targetElem = document.querySelector(target.selector);
    if (!targetElem) {
      console.warn("Target element not found for selector: " + target.selector);
      return;
    }
    const targetRect = targetElem.getBoundingClientRect();
    // Use the center of the nav link as the endpoint.
    const endX = targetRect.left + targetRect.width / 2;
    const endY = targetRect.top + targetRect.height / 2;

    // Create an SVG path element with a cubic Bézier curve.
    const path = document.createElementNS(svgNS, "path");
    // Here we choose control points to create a pleasing curve.
    // Adjust the offset values as needed.
    const cp1X = startX;
    const cp1Y = startY - 50;  // control point offset upward from the heading
    const cp2X = endX;
    const cp2Y = endY + 50;    // control point offset downward from the target

    const d = `M ${startX} ${startY} C ${cp1X} ${cp1Y}, ${cp2X} ${cp2Y}, ${endX} ${endY}`;
    path.setAttribute("d", d);
    path.setAttribute("stroke", "#000"); // line color; adjust as needed
    path.setAttribute("stroke-width", "2");
    path.setAttribute("fill", "none");
    path.setAttribute("marker-end", "url(#arrowhead)");

    // (Optional: Animate the drawing of the path.)
    const length = path.getTotalLength();
    path.style.strokeDasharray = length;
    path.style.strokeDashoffset = length;
    // Trigger a reflow to make the transition work.
    void path.getBoundingClientRect();
    path.style.transition = "stroke-dashoffset 2s ease";
    path.style.strokeDashoffset = "0";

    svg.appendChild(path);
  });
});
</script>
