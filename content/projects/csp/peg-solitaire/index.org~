+++
title = "Peg Solitaire Solver"
categories = ["cs", "projects"]
tags = ["bfs", "dfs", "memory", "puzzle", "combinatorics"]
math = "true"
toc = "true"
+++

* Personal Motivations

I grew up as a child with this puzzle in my house. My mother could solve it, along with a couple members on her side of the family.

Mum never knew the algorithm, nor any techniques beyond "My hand just knows"; as a result I spent 4 determined days in my youth working it until I had solved it.

During these 4 days, I learned a heuristic: to consider the L shape `___|` and realise that for every such set, you can perform /legal operations/ until you are left with a single marble.
Then, since there are 32 marbles, you can do this 8 times until you have 4 remaining, and finally perform this "L-trick" one last time til a single peg remains in the middle of the board.

#+BEGIN_CENTER
#+CAPTION: start board to end board
\[\begin{matrix} & & \mathrm{O} & \mathrm{O} & \mathrm{O} & & \\
   & & \mathrm{O} & \mathrm{O} & \mathrm{O} & & \\
   \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} \\
   \mathrm{O} & \mathrm{O} & \mathrm{O} & . & \mathrm{O} & \mathrm{O} & \mathrm{O} \\
   \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} & \mathrm{O} \\
   & & \mathrm{O} & \mathrm{O} & \mathrm{O} & & \\
   & & \mathrm{O} & \mathrm{O} & \mathrm{O} & & \\
\end{matrix}\;\leadsto\;\begin{matrix}
   & & \cdot & \cdot & \cdot & & \\
   & & \cdot & \cdot & \cdot & & \\
   \cdot & \cdot & \cdot & . & \cdot & \cdot & \cdot \\
   \cdot & \cdot & \cdot & \mathrm{O} & \cdot & \cdot & \cdot \\
   \cdot & \cdot & \cdot & \cdot & \cdot & \cdot & \cdot \\
    & & \cdot & \cdot & \cdot & & \\
    & & \cdot & \cdot & \cdot & & \\
\end{matrix}\]
#+END_CENTER
    

After battling hard for this solution, I find the wikipedia page and associated [[https://en.wikipedia.org/wiki/Peg_solitaire][article]] only to learn that there are upward of 18,000 distinct solutions.

Anyways, fast-forward slightly, and now I can code so the above directory contains a *DFS* implementation that searches every possible move until it finds a winning configuration:

`s s w w s w w w w s a a s d d a d d d d a`

Here, the letters are the basic `wasd` movements, and the spaces are the execution of that move.

Ultimately the game logic looks something like this: 
`[[3, 3, 's', 10], [2, 3, 'd', 9], [2, 2, 's', 4], [0, 2, 'a', 2], [2, 1, 'a', 1], [2, 2, 'd', 8], [0, 4, 'w', 6], [2, 4, 'a', 12], [1, 2, 'w', 7], [2, 2, 's', 16], [3, 2, 'd', 15], [1, 2, 'w', 3], [1, 4, 'w', 13], [2, 4, 's', 17], [3, 4, 'a', 18], [1, 4, 'w', 11], [3, 2, 'w', 22], [4, 2, 'd', 21], [2, 2, 'w', 27], [3, 2, 's', 20], [3, 4, 'd', 5], [2, 4, 'w', 14], [3, 4, 's', 24], [4, 4, 'a', 25], [4, 5, 'd', 26], [4, 4, 'w', 29], [5, 4, 's', 32], [6, 4, 'd', 31], [4, 4, 'w', 19], [4, 3, 'a', 30], [3, 3, 'w', 23]]`

where the first 2 moves are the coordinates of the peg being moved, the letter is the move and the corresponding number is the 'id' of the marble being _killed_.

** Prospectives
Looking forwards, I want to train a learner to solve this puzzle via reinforcement learning.
