+++
title = "Elisp Notes"
tags = ["notes", "gnu", "emacs"]
+++

I remember when using Emacs itself was a huge struggle for me. But now I have just =sudo apt install emacs='d this vanilla install and I am already off to the races.

Anyways, I'll probably slim down this prose at a later date when I find it cringe and too verbose; but for now I am having a terrific time thwacking away at a [[drunkdeer.com/products/drunkdeer-a75-pro-wired-actuation-distance-adjustable-magnetic-switch-keyboard][Drunkdeer A75 Pro]] (thanks Aarav).

I've opted to scribble here as opposed to in a =README= this time.

#+BEGIN_SRC shell
  │  ~/.config  sudo apt install emacs-common-non-dfsg
#+END_SRC

for some reason getting the =info= entry working for "An Introduction to Programming in Emacs Lisp" was a little more involved than it should have been. Anyways, just run the above command and the compressed =.info.gz= files should be downloaded.

* Info: An Introduction to Programming in Emacs Lisp

** 1. Lisp Lists

#+BEGIN_QUOTE
It is better to refer to Emacs as an "extensible computing environment".
#+END_QUOTE

Lisp was first developed in the late 1950s at the Massachusetts
Institute of Technology for research in artificial intelligence.

Emacs Lisp is much simpler than Common Lisp

Lots of Isolated Silly Parentheses

In Lisp, both data and programs are represented the same way

In a list, atoms are separated from each other by whitespace.  They
can be right next to a parenthesis.

- when a quote (') is preceeding a list, then it tells Lisp to do _nothing_ with the list.
  - i.e. (+ 2 2) will evaluate to 4 with =C-x C-e=, but
  - '(this is a quoted list) will not interpret the first "atom" as an instruction.

=if=, =defun=, =when=.

the interpreter works left to right, from one expression
to the next.

you can byte-compile emacs lisp! extension is =.elc=.


- when a quote (') is preceeding a list, then it tells Lisp to do _nothing_ with the list.
  - i.e. (+ 2 2) will evaluate to 4 with =C-x C-e=, but
  - '(this is a quoted list) will not interpret the first "atom" as an instruction.

=if=, =defun=, =when=.

the interpreter works left to right, from one expression
to the next.

you can byte-compile emacs lisp! extension is =.elc=.

#+BEGIN_SRC lisp
     (message "He saw %d %s"
              (- fill-column 32)
              (concat "red "
                      (substring
                       "The quick brown foxes jumped." 16 21)
                      " leaping."))
#+END_SRC

#+BEGIN_SRC lisp
     (setq trees '(pine fir oak maple)
           herbivores '(gazelle antelope zebra))
#+END_SRC

#+BEGIN_SRC lisp
     (setq counter 0)                ; Let's call this the initializer.

     (setq counter (+ counter 1))    ; This is the incrementer.

     counter                         ; This is the counter.
#+END_SRC

- numbers and strings are literals and evaluate to themselves.
- a function always returns a value when it is evaluated (unless error).
  - the func can also carry out an action as a side-effect. often times this is the primary purpose.

** 2. Practising Evaluation

** 3. Writing Defuns

** 4. Buffer Walk Through

** 5. More Complex

** 
