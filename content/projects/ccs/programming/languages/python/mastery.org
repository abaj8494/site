+++
title = "Mastering Python"
tags = ["sharpen"]
+++


{{< collapse id="mastery-python" lvl="3" >}}
#+begin_export html
<aside class="custom-toc">
<nav>
<p class="sidebar__heading">Table Of Contents</p>
#+end_export

#+toc: headlines 2

#+begin_export html
</nav></aside>
#+end_export


Source: https://www.w3resource.com/python-exercises/python_100_exercises_with_solutions.php

** DONE Exercise 1:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-03-10 Mon 13:32]
:END:

Create a list with values ranging from 0 to 9.

*** soln

list's take in iterators
#+begin_src jupyter-python :session mast-python
  #my_list = [i for i in range(10)]
  my_list = list(range(10))
  my_list
#+end_src

*** output
#+RESULTS:
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |

** DONE Exercise 2:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Convert a list of integers to a list of strings.

*** soln

=map(function, iterable, *iterables)=
map returns an iterator. it applies fn to an iterator with iterable args.
#+begin_src jupyter-python :session mast-python
  my_list_as_strs = list(map(str, my_list))
  my_list_as_strs
#+end_src

*** output
#+RESULTS:
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |

** DONE Exercise 3:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Multiply all elements in a list by 2.

*** soln

a very functional programming approach; manipulating data with subsequent functional transformations.

also, unusually I could not find any documentation on lambda expressions in the main [[https://docs.python.org/3/library/index.html][Python Standard Library]]. I had to click into the tutorial and take a look at [[https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions]["more control flow tools"]].
#+begin_src jupyter-python :session mast-python
  another_list = list(range(5))
  times_two_list = list(map(lambda x: 2*x, another_list))
  times_two_list
#+end_src

*** output
#+RESULTS:
| 0 | 2 | 4 | 6 | 8 |


** DONE Exercise 4:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Extract all odd numbers from a list of integers.

*** soln

maps continue to be useful, however perhaps a filter will be a better idea here.

#+begin_src jupyter-python :session mast-python
  another_list = list(range(20))
  odd_lists = list(filter(lambda x: x%2==1, another_list))
  odd_lists
#+end_src

the modulo 2 case would equal 1 whenever an odd number was given. we're spitting out the cases of which that was true:
*** output
#+RESULTS:
| 1 | 3 | 5 | 7 | 9 | 11 | 13 | 15 | 17 | 19 |

** DONE Exercise 5:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Replace all odd numbers in a list with -1.

*** soln

we go back to a map for this one.

note that the ternary operator syntax is different to C/Java.
#+begin_src jupyter-python :session mast-python
  another_list = list(range(20))
  odd_lists_minus_one = list(map(lambda x:-1 if x%2==1 else x, another_list))
  odd_lists_minus_one
#+end_src
*** output
#+RESULTS:
| 0 | -1 | 2 | -1 | 4 | -1 | 6 | -1 | 8 | -1 | 10 | -1 | 12 | -1 | 14 | -1 | 16 | -1 | 18 | -1 |

** Exercise 6:

Convert a list of integers to a list of booleans where all non-zero values become True.

*** soln

note that in Python, true is actually =True= and false, =False=.

#+begin_src jupyter-python :session mast-python
  list_ints = list(range(15))
  bool_list = list(map(lambda x: True if x != 0 else False, list_ints))
  bool_list
#+end_src

*** output
#+RESULTS:
| False | True | True | True | True | True | True | True | True | True | True | True | True | True | True |

** Exercise 7:

Replace all even numbers in a list with their negative.

#+begin_src jupyter-python :session mast-python
  list_ints = list(range(15))
  neg_list = list(map(lambda x: -x if x % 2 == 0 else x, list_ints))
  neg_list
#+end_src

#+RESULTS:
| 0 | 1 | -2 | 3 | -4 | 5 | -6 | 7 | -8 | 9 | -10 | 11 | -12 | 13 | -14 |

** Exercise 8:

Create a 3x3 list of lists with random values and normalize it.

*** soln

crazy: notice that the =randint= bounds are <= and >=!
#+begin_src jupyter-python :session mast-python
  import random
  random.seed(4)
  def create_n_by_n_list(n):
	return [[random.randint(0,n) for i in range(n)] for i in list(range(0,n))]
  def normalise_list(l, n):
	import numpy
	return numpy.array(l) / n
  my_list = create_n_by_n_list(6)
  norm_list = normalise_list(my_list, 6)
  print(norm_list)
#+end_src

*** output

I generalised the problem to nxn.

also I used numpy to skip a list comprehension.
#+RESULTS:
: [[0.16666667 0.33333333 0.         0.83333333 0.5        0.5       ]
:  [0.16666667 0.         0.         0.         0.5        0.66666667]
:  [0.33333333 1.         1.         0.         0.16666667 0.66666667]
:  [0.66666667 0.33333333 0.33333333 1.         0.16666667 1.        ]
:  [0.         0.33333333 0.16666667 0.         1.         0.83333333]
:  [1.         0.33333333 1.         0.33333333 0.16666667 0.16666667]]

** Exercise 9:

Calculate the sum of the diagonal elements of a 3x3 matrix (list of lists).

*** soln

#+begin_src jupyter-python :session mast-python
  import numpy
  print(sum(numpy.diag(norm_list)))
#+end_src

#+RESULTS:
: 3.3333333333333335

** Exercise 10:

Find the indices of non-zero elements in a list.

*** soln

this notation is illegal: =lambda i, v:=
#+begin_src jupyter-python :session mast-python
  new_list = list(range(-5, 4))
  tuple_list = filter(lambda t: t[1] != 0, enumerate(new_list)) # filter correct tuples
  out_list = [e[0] for e in tuple_list] # construct list of indices
  out_list
#+end_src

*** output
fk that was hard.
#+RESULTS:
| 0 | 1 | 2 | 3 | 4 | 6 | 7 | 8 |

** Exercise 11:

Reverse a list.

** Exercise 12:

Create a 3x3 identity matrix as a list of lists.

** Exercise 13:

Reshape a 1D list to a 2D list with 2 rows.

** Exercise 14:

Stack two lists vertically.

** Exercise 15:

Get the common items between two lists.

** Exercise 16:

Create a 5x5 list of lists with row values ranging from 0 to 4.

** Exercise 17:

Find the index of the maximum value in a list.

** Exercise 18:

Normalize the values in a list between 0 and 1.

** Exercise 19:

Calculate the dot product of two lists.

** Exercise 20:

Count the number of elements in a list within a specific range.

** Exercise 21:

Find the mean of each row in a 2D list.

** Exercise 22:

Create a random 4x4 list of lists and extract the diagonal elements.

** Exercise 23:

Count the number of occurrences of a specific value in a list.

** Exercise 24:

Replace all values in a list with the mean of the list.

** Exercise 25:

Find the indices of the maximum and minimum values in a list.

** Exercise 26:

Create a 2D list with 1 on the border and 0 inside.

** Exercise 27:

Find the unique values and their counts in a list.

** Exercise 28:

Create a 3x3 list of lists with values ranging from 0 to 8.

** Exercise 29:

Calculate the exponential of all elements in a list.

** Exercise 30:

Swap two rows in a 2D list.

** Exercise 31:

Create a random 3x3 list of lists and replace all values greater than 0.5 with 1 and all others with 0.

** Exercise 32:

Find the indices of the top N maximum values in a list.

** Exercise 33:

Calculate the mean of each column in a 2D list.

** Exercise 34:

Normalize the values in each column of a 2D list.

** Exercise 35:

Concatenate two lists.

** Exercise 36:

Create a 2D list with random values and sort each row.

** Exercise 37:

Check if all elements in a list are non-zero.

** Exercise 38:

Find the indices of the maximum value in each row of a 2D list.

** Exercise 39:

Create a 2D list and replace all nan values with the mean of the list.

** Exercise 40:

Calculate the mean of each row in a 2D list ignoring nan values.

** Exercise 41:

Compute the sum of diagonal elements in a 2D list.

** Exercise 42:

Convert radians to degrees for each element in a list.

** Exercise 43:

Calculate the pairwise Euclidean distance between two lists.

** Exercise 44:

Create a list and set the values between the 25th and 75th percentile to 0.

** Exercise 45:

Calculate the element-wise square of the difference between two lists.

** Exercise 46:

Replace all even numbers in a list with the next odd number.

** Exercise 47:

Create a 2D list and normalize each column by its range.

** Exercise 48:

Compute the cumulative sum of elements along a given axis in a 2D list.

** Exercise 49:

Check if any element in a list is non-zero.

** Exercise 50:

Create a 2D list with random integers and replace all values greater than a certain threshold with that threshold.

** Exercise 51:

Find the median of a list of numbers.

** Exercise 52:

Convert a list of numbers to a list of their logarithms.

** Exercise 53:

Find the mode of a list of numbers.

** Exercise 54:

Flatten a list of lists.

** Exercise 55:

Transpose a 2D list.

** Exercise 56:

Remove duplicates from a list while preserving order.

** Exercise 57:

Find the intersection of two lists.

** Exercise 58:

Merge two dictionaries.

** Exercise 59:

Sort a list of dictionaries by a key.

** Exercise 60:

Filter a dictionary based on its values.

** Exercise 61:

Create a dictionary from two lists.

** Exercise 62:

Find the maximum value in a dictionary.

** Exercise 63:

Invert a dictionary (swap keys and values).

** Exercise 64:

Create a dictionary with a default value.

** Exercise 65:

Convert a dictionary to a list of tuples.

** Exercise 66:

Find the length of the longest string in a list.

** Exercise 67:

Reverse the words in a sentence.

** Exercise 68:

Check if a string is a palindrome.

** Exercise 69:

Remove punctuation from a string.

** Exercise 70:

Count the occurrences of each character in a string.

** Exercise 71:

Find the longest common prefix among a list of strings.

** Exercise 72:

Convert a string to a list of characters.

** Exercise 73:

Generate a list of random integers.

** Exercise 74:

Shuffle a list.

** Exercise 75:

Generate a random password of a given length.

** Exercise 76:

Calculate the factorial of a number.

** Exercise 77:

Calculate the Fibonacci sequence up to a given number of terms.

** Exercise 78:

Check if a number is prime.

** Exercise 79:

Find the greatest common divisor (GCD) of two numbers.

** Exercise 80:

Find the least common multiple (LCM) of two numbers.

** Exercise 81:

Sort a list of tuples by the second element.

** Exercise 82:

Find the second largest number in a list.

** Exercise 83:

Check if a list is a palindrome.

** Exercise 84:

Find the sum of the digits of a number.

** Exercise 85:

Find the product of the digits of a number.

** Exercise 86:

Check if a string is a valid number.

** Exercise 87:

Find the length of the longest word in a sentence.

** Exercise 88:

Convert a list of tuples to a dictionary.

** Exercise 89:

Filter a list of dictionaries based on a key value.

** Exercise 90:

Sort a list of tuples by multiple keys.

** Exercise 91:

Merge two lists into a dictionary, using one as keys and the other as values.

** Exercise 92:

Create a dictionary with keys as numbers and values as their squares.

** Exercise 93:

Check if two strings are anagrams.

** Exercise 94:

Count the number of vowels in a string.

** Exercise 95:

Check if a string contains only digits.

** Exercise 96:

Find the first non-repeated character in a string.

** Exercise 97:

Reverse each word in a sentence.

** Exercise 98:

Generate a list of Fibonacci numbers up to a given number.

** Exercise 99:

Remove all whitespaces from a string.

** Exercise 100:

Replace all occurrences of a substring in a string.
