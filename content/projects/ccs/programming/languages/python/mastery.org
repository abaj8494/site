+++
title = "Mastering Python"
tags = ["sharpen"]
+++


{{< collapse id="mastery-python" lvl="3" >}}
#+begin_export html
<aside class="custom-toc">
<nav>
<p class="sidebar__heading">Table Of Contents</p>
#+end_export

#+toc: headlines 2

#+begin_export html
</nav></aside>
#+end_export


Source: https://www.w3resource.com/python-exercises/python_100_exercises_with_solutions.php

** DONE Exercise 1:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-03-10 Mon 13:32]
:END:

Create a list with values ranging from 0 to 9.

*** soln

list's take in iterators
#+begin_src jupyter-python :session mast-python
  #my_list = [i for i in range(10)]
  my_list = list(range(10))
  my_list
#+end_src

*** output
#+RESULTS:
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |

** DONE Exercise 2:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Convert a list of integers to a list of strings.

*** soln

=map(function, iterable, *iterables)=
map returns an iterator. it applies fn to an iterator with iterable args.
#+begin_src jupyter-python :session mast-python
  my_list_as_strs = list(map(str, my_list))
  my_list_as_strs
#+end_src

*** output
#+RESULTS:
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |

** DONE Exercise 3:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Multiply all elements in a list by 2.

*** soln

a very functional programming approach; manipulating data with subsequent functional transformations.

also, unusually I could not find any documentation on lambda expressions in the main [[https://docs.python.org/3/library/index.html][Python Standard Library]]. I had to click into the tutorial and take a look at [[https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions]["more control flow tools"]].
#+begin_src jupyter-python :session mast-python
  another_list = list(range(5))
  times_two_list = list(map(lambda x: 2*x, another_list))
  times_two_list
#+end_src

*** output
#+RESULTS:
| 0 | 2 | 4 | 6 | 8 |


** DONE Exercise 4:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Extract all odd numbers from a list of integers.

*** soln

maps continue to be useful, however perhaps a filter will be a better idea here.

#+begin_src jupyter-python :session mast-python
  another_list = list(range(20))
  odd_lists = list(filter(lambda x: x%2==1, another_list))
  odd_lists
#+end_src

the modulo 2 case would equal 1 whenever an odd number was given. we're spitting out the cases of which that was true:
*** output
#+RESULTS:
| 1 | 3 | 5 | 7 | 9 | 11 | 13 | 15 | 17 | 19 |

** DONE Exercise 5:
CLOSED: [2025-03-10 Mon 13:32]
:LOGBOOK:
- State "DONE"       from              [2025-03-10 Mon 13:32]
:END:

Replace all odd numbers in a list with -1.

*** soln

we go back to a map for this one.

note that the ternary operator syntax is different to C/Java.
#+begin_src jupyter-python :session mast-python
  another_list = list(range(20))
  odd_lists_minus_one = list(map(lambda x:-1 if x%2==1 else x, another_list))
  odd_lists_minus_one
#+end_src
*** output
#+RESULTS:
| 0 | -1 | 2 | -1 | 4 | -1 | 6 | -1 | 8 | -1 | 10 | -1 | 12 | -1 | 14 | -1 | 16 | -1 | 18 | -1 |

** DONE Exercise 6:
CLOSED: [2025-03-11 Tue 12:55]
:LOGBOOK:
- State "DONE"       from              [2025-03-11 Tue 12:55]
:END:

Convert a list of integers to a list of booleans where all non-zero values become True.

*** soln

note that in Python, true is actually =True= and false, =False=.

#+begin_src jupyter-python :session mast-python
  list_ints = list(range(15))
  bool_list = list(map(lambda x: True if x != 0 else False, list_ints))
  bool_list
#+end_src

*** output
#+RESULTS:
| False | True | True | True | True | True | True | True | True | True | True | True | True | True | True |

** DONE Exercise 7:
CLOSED: [2025-03-11 Tue 12:55]
:LOGBOOK:
- State "DONE"       from              [2025-03-11 Tue 12:55]
:END:

Replace all even numbers in a list with their negative.

#+begin_src jupyter-python :session mast-python
  list_ints = list(range(15))
  neg_list = list(map(lambda x: -x if x % 2 == 0 else x, list_ints))
  neg_list
#+end_src

#+RESULTS:
| 0 | 1 | -2 | 3 | -4 | 5 | -6 | 7 | -8 | 9 | -10 | 11 | -12 | 13 | -14 |

** DONE Exercise 8:
CLOSED: [2025-03-11 Tue 12:55]
:LOGBOOK:
- State "DONE"       from              [2025-03-11 Tue 12:55]
:END:

Create a 3x3 list of lists with random values and normalize it.

*** soln

crazy: notice that the =randint= bounds are <= and >=!
#+begin_src jupyter-python :session mast-python
  import random
  random.seed(4)
  def create_n_by_n_list(n):
	return [[random.randint(0,n) for i in range(n)] for i in list(range(0,n))]
  def normalise_list(l, n):
	import numpy
	return numpy.array(l) / n
  my_list = create_n_by_n_list(6)
  norm_list = normalise_list(my_list, 6)
  print(norm_list)
#+end_src

#+RESULTS:
: [[0.16666667 0.33333333 0.         0.83333333 0.5        0.5       ]
:  [0.16666667 0.         0.         0.         0.5        0.66666667]
:  [0.33333333 1.         1.         0.         0.16666667 0.66666667]
:  [0.66666667 0.33333333 0.33333333 1.         0.16666667 1.        ]
:  [0.         0.33333333 0.16666667 0.         1.         0.83333333]
:  [1.         0.33333333 1.         0.33333333 0.16666667 0.16666667]]

*** output

I generalised the problem to nxn.

also I used numpy to skip a list comprehension.
#+RESULTS:
: [[0.16666667 0.33333333 0.         0.83333333 0.5        0.5       ]
:  [0.16666667 0.         0.         0.         0.5        0.66666667]
:  [0.33333333 1.         1.         0.         0.16666667 0.66666667]
:  [0.66666667 0.33333333 0.33333333 1.         0.16666667 1.        ]
:  [0.         0.33333333 0.16666667 0.         1.         0.83333333]
:  [1.         0.33333333 1.         0.33333333 0.16666667 0.16666667]]

** DONE Exercise 9:
CLOSED: [2025-03-11 Tue 12:55]
:LOGBOOK:
- State "DONE"       from              [2025-03-11 Tue 12:55]
:END:

Calculate the sum of the diagonal elements of a 3x3 matrix (list of lists).

*** soln

#+begin_src jupyter-python :session mast-python
  import numpy
  print(sum(numpy.diag(norm_list)))
#+end_src

#+RESULTS:
: 3.3333333333333335

** DONE Exercise 10:
CLOSED: [2025-03-11 Tue 12:55]
:LOGBOOK:
- State "DONE"       from              [2025-03-11 Tue 12:55]
:END:

Find the indices of non-zero elements in a list.

*** soln

this notation is illegal: =lambda i, v:=
#+begin_src jupyter-python :session mast-python
  new_list = list(range(-5, 4))
  tuple_list = filter(lambda t: t[1] != 0, enumerate(new_list)) # filter correct tuples
  out_list = [e[0] for e in tuple_list] # construct list of indices
  out_list
#+end_src

*** output
fk that was hard.
#+RESULTS:
| 0 | 1 | 2 | 3 | 4 | 6 | 7 | 8 |

** DONE Exercise 11:
CLOSED: [2025-03-12 Wed 11:15]
:LOGBOOK:
- State "DONE"       from              [2025-03-12 Wed 11:15]
:END:

Reverse a list.

*** soln
one thing to be careful of with the =list.reverse()= method is that the reversal happens "in-place", i.e. on the object that the method was called on.
#+begin_src jupyter-python :session mast-python
  out_list.reverse() # no return value for this
  print(out_list)
  print(new_list) # defined in the last q
  print(reversed(new_list)) # returns an iterator object
  print(list(reversed(new_list)))
#+end_src


#+RESULTS:
: [8, 7, 6, 4, 3, 2, 1, 0]
: [-5, -4, -3, -2, -1, 0, 1, 2, 3]
: <list_reverseiterator object at 0x107bdf8b0>
: [3, 2, 1, 0, -1, -2, -3, -4, -5]

further, it must noted that all the above are "shallow-copies", whilst they are fast, if the objects which constitute the list are mutable, then you could run into problems with the reversed list misbehaving later:

#+begin_src jupyter-python :session mast-python
  x = 6
  a = 7
  b = 8
  var_list = [x, a, b]
  print(f"var_list: {var_list}")
  stable_list = var_list[::-1]
  question_list = list(reversed(var_list))
  x = 1
  a = 2
  b = 3
  unstable_list = list(reversed(var_list))
  print(question_list)
  print(unstable_list)
  print(stable_list)
#+end_src

now, notice that you STILL cannot see a difference! this is because your =x,a,b= variables are immutable; they are integers.
#+RESULTS:
: var_list: [6, 7, 8]
: [8, 7, 6]
: [8, 7, 6]
: [8, 7, 6]

try this code
#+begin_src jupyter-python :session mast-python
  x = [6]
  a = [7]
  b = [8]
  var_list = [x, a, b]
  print(f"var_list: {var_list}")
  stable_list = var_list[::-1]
  question_list = list(reversed(var_list))
  x.append(1)
  a.append(2)
  b.append(3)
  unstable_list = list(reversed(var_list))
  print(f"question_list: {question_list}")
  print(f"unstable_list: {unstable_list}")
  print(f"stable_list: {stable_list}")
#+end_src

#+RESULTS:
: var_list: [[6], [7], [8]]
: question_list: [[8, 3], [7, 2], [6, 1]]
: unstable_list: [[8, 3], [7, 2], [6, 1]]
: stable_list: [[8, 3], [7, 2], [6, 1]]

ultimately, if you want a non-shallow copy you must use deepcopy
#+begin_src jupyter-python :session mast-python
  import copy
  stable_list = copy.deepcopy(var_list)
  print(f"stable_list: {stable_list}")
  # and now, even if you mutate the lists, stable_list does not change but unstable_list will:
  x.pop()
  print(f"unstable_list: {unstable_list}")
  print(f"still stable: {stable_list}")
#+end_src

#+RESULTS:
: stable_list: [[6, 1], [7, 2], [8, 3]]
: unstable_list: [[8, 3], [7, 2], [6]]
: still stable: [[6, 1], [7, 2], [8, 3]]

** DONE Exercise 12:
CLOSED: [2025-03-12 Wed 11:15]
:LOGBOOK:
- State "DONE"       from "DONE"       [2025-03-12 Wed 11:15]
- State "DONE"       from              [2025-03-12 Wed 11:15]
:END:

Create a 3x3 identity matrix as a list of lists.

#+begin_src jupyter-python :session mast-python
  import numpy as np
  print(np.eye(3))
#+end_src

#+RESULTS:
: [[1. 0. 0.]
:  [0. 1. 0.]
:  [0. 0. 1.]]

** DONE Exercise 13:
CLOSED: [2025-03-12 Wed 11:15]
:LOGBOOK:
- State "DONE"       from              [2025-03-12 Wed 11:15]
:END:

Reshape a 1D list to a 2D list with 2 rows.

*** soln1
#+begin_src jupyter-python :session mast-python
  l = np.array(range(12))
  print(l.reshape(2, -1))
#+end_src

*** output
#+RESULTS:
: [[ 0  1  2  3  4  5]
:  [ 6  7  8  9 10 11]]

*** soln2, no numpy
#+begin_src jupyter-python :session mast-python
  l = list(range(12))
  x = [l[x:x+int(len(l)/2)] for x in range(0, len(l), int(len(l)/2))]
  print(x)
#+end_src

*** output
terrific, well done!
#+RESULTS:
: [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11]]

** DONE Exercise 14:
CLOSED: [2025-03-12 Wed 11:15]
:LOGBOOK:
- State "DONE"       from              [2025-03-12 Wed 11:15]
:END:

Stack two lists vertically.

#+begin_src jupyter-python :session mast-python
  l1 = list(range(4))[::-1]
  l2 = list(range(4))
  l = [l1, l2]
  print(l)
#+end_src

#+RESULTS:
: [[3, 2, 1, 0], [0, 1, 2, 3]]

** DONE Exercise 15:
CLOSED: [2025-03-12 Wed 11:15]
:LOGBOOK:
- State "DONE"       from              [2025-03-12 Wed 11:15]
:END:

Get the common items between two lists.

shit, I accidentally got all the /unique/ items by using sets
#+begin_src jupyter-python :session mast-python
  l1 = list(range(4))[::-1]
  l2 = list(range(7))
  l1.extend(l2)
  s = list(set(l1))
  print(s)
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5, 6]

that's okay, it's not much different to find the duplicates; we can use the =intersection= method of =sets=
#+begin_src jupyter-python :session mast-python
  l1 = list(range(4))[::-1]
  l2 = list(range(7))
  dupes = list(set(l1).intersection(set(l2)))
  # also, note that the intersection method can accept any iterable! thus this works too:
  dupes = list(set(l1).intersection(l2))
  print(dupes)
#+end_src

*** output
#+RESULTS:
: [0, 1, 2, 3]

** DONE Exercise 16:
CLOSED: [2025-03-13 Thu 15:41]
:LOGBOOK:
- State "DONE"       from              [2025-03-13 Thu 15:41]
:END:

Create a 5x5 list of lists with row values ranging from 0 to 4.

*** soln1

#+begin_src jupyter-python :session mast-python
  import random
  random.seed(4)
  n = 5
  l = [ [random.randint(0,n-1) for i in range(n)] for i in range(n)]
  print(l)
#+end_src

#+RESULTS:
: [[1, 2, 0, 3, 3], [1, 0, 0, 0, 3], [4, 2, 0, 1, 4], [4, 2, 2, 1, 0], [2, 1, 0, 2, 2]]

*** soln2
i believe we can accomplish the same thing more quickly with numpy:

#+begin_src jupyter-python :session mast-python
  import numpy
  m = numpy.random.randint(5, size=(5,5))
  print(m)
#+end_src

#+RESULTS:
: [[2 3 1 3 3]
:  [0 4 4 3 3]
:  [3 2 0 2 2]
:  [4 3 4 1 2]
:  [1 4 0 0 4]]

*** timing

#+begin_src jupyter-python :session mast-python
import timeit

# Setup code for the list-comprehension approach
setup1 = """
import random
random.seed(4)
n = 5
"""

# The statement we want to time repeatedly
stmt1 = """
l = [[random.randint(0, n - 1) for i in range(n)] for j in range(n)]
"""

# Setup code for the NumPy approach
setup2 = """
import numpy
"""

# The statement we want to time repeatedly
stmt2 = """
m = numpy.random.randint(5, size=(5, 5))
"""

# Number of iterations to run timeit
iterations = 1_000_000

time1 = timeit.timeit(stmt=stmt1, setup=setup1, number=iterations)
time2 = timeit.timeit(stmt=stmt2, setup=setup2, number=iterations)

print(f"List comprehension approach: {time1:.6f} seconds")
print(f"NumPy approach:              {time2:.6f} seconds")
#+end_src

#+RESULTS:
: List comprehension approach: 7.771532 seconds
: NumPy approach:              3.685444 seconds


** DONE Exercise 17:
CLOSED: [2025-03-13 Thu 15:41]
:LOGBOOK:
- State "DONE"       from              [2025-03-13 Thu 15:41]
:END:

Find the index of the maximum value in a list.

*** soln
#+begin_src jupyter-python :session mast-python
max(max(l))
#+end_src

#+RESULTS:
: 4

and for a single dimensional array (the above was 2d)
#+begin_src jupyter-python :session mast-python
max(range(15))
#+end_src

#+RESULTS:
: 14

however, the number of =max= calls is clearly dependent on the dimensionality. as such we can use =numpy=:
#+begin_src jupyter-python :session mast-python
numpy.amax(l)
#+end_src

#+RESULTS:
: 4

** DONE Exercise 18:
CLOSED: [2025-03-13 Thu 15:41]
:LOGBOOK:
- State "DONE"       from              [2025-03-13 Thu 15:41]
:END:

Normalize the values in a list between 0 and 1.

we can do it nakedly with the =math= library and implement softmax, which is defined in [[https://abaj.ai/projects/mathematics/calculus/mvars#softmax][multi-variate calculus]].
#+begin_src jupyter-python :session mast-python
  import math
  my_list = list(range(7))
  new_list = list(map(lambda x: math.exp(x) / sum(math.exp(y) for y in my_list), my_list))
  print(new_list)
  print(sum(new_list)) # checking it all sums to 1
#+end_src

#+RESULTS:
: [0.0015683003158864725, 0.004263082250240778, 0.011588259014055805, 0.03150015390138463, 0.08562629594379713, 0.23275640430228017, 0.6326975042723549]
: 0.9999999999999999

#+begin_src jupyter-python :session mast-python
  import numpy as np
  def softmax(x):
      return np.exp(x) / sum(np.exp(x))

  print(sum(softmax(my_list)))
  print(softmax(my_list))
#+end_src

#+RESULTS:
: 0.9999999999999999
: [0.0015683  0.00426308 0.01158826 0.03150015 0.0856263  0.2327564
:  0.6326975 ]

** DONE Exercise 19:
CLOSED: [2025-03-13 Thu 15:41]
:LOGBOOK:
- State "DONE"       from              [2025-03-13 Thu 15:41]
:END:

Calculate the dot product of two lists.

#+begin_src jupyter-python :session mast-python
  random.seed(4)
  list_a = random.choices(range(10),k=10) # without numpy
  list_b = random.choices(range(10),k=10)
  print(list_a)
  print(list_b)
  dot_p = sum(list(map(math.prod, zip(list_a,list_b))))
  print(dot_p)
#+end_src

#+RESULTS:
: [2, 1, 3, 1, 0, 4, 9, 8, 7, 2]
: [5, 2, 1, 1, 2, 9, 8, 8, 8, 1]
: 246

** DONE Exercise 20:
CLOSED: [2025-03-13 Thu 15:41]
:LOGBOOK:
- State "DONE"       from              [2025-03-13 Thu 15:41]
:END:

Count the number of elements in a list within a specific range.

#+begin_src jupyter-python :session mast-python
  def count_elements_within_range(a, b, x):
      return sum(a <= y <= b for y in x)
  count_elements_within_range(5, 12, list(range(14))[5::3])
#+end_src

#+RESULTS:
: 3

** DONE Exercise 21:
CLOSED: [2025-03-13 Thu 15:46]
:LOGBOOK:
- State "DONE"       from              [2025-03-13 Thu 15:46]
:END:

Find the mean of each row in a 2D list.

#+begin_src jupyter-python :session mast-python
  def average(l):
      return sum(l)/len(l)

  """ takes in list of lists
      returns list of averages, one for each row
  """
  def mean_list_of_rows(ml):
    return [average(x) for x in ml]

  my_list = [[1,2,3],[4,5],[3,3]]
  mean_list_of_rows(my_list)
#+end_src

#+RESULTS:
| 2.0 | 4.5 | 3.0 |

** Exercise 22:

Create a random 4x4 list of lists and extract the diagonal elements.

#+begin_src jupyter-python :session mast-python
  import numpy as np
  list_of_lists = np.random.randint(10, size=(4,4))
  print(list_of_lists)
  np.diag(list_of_lists)
#+end_src

#+RESULTS:
:RESULTS:
: [[4 6 4 0]
:  [9 2 2 1]
:  [9 0 6 7]
:  [7 3 1 4]]
: array([4, 2, 6, 4])
:END:

** Exercise 23:

Count the number of occurrences of a specific value in a list.

#+begin_src jupyter-python :session mast-python
range_list = list(range(6))
range_list.count(4)
#+end_src

#+RESULTS:
: 1

** Exercise 24:

Replace all values in a list with the mean of the list.

#+begin_src jupyter-python :session mast-python
  range_list = list(range(6))
  range_list = [average(range_list) for x in range_list]
  print(range_list)
#+end_src

#+RESULTS:
: [2.5, 2.5, 2.5, 2.5, 2.5, 2.5]

** Exercise 25:

Find the indices of the maximum and minimum values in a list.

#+begin_src jupyter-python :session mast-python
  range_list = list(range(6))
  print(range_list.index(min(range_list)))
  print(range_list.index(max(range_list)))
#+end_src

#+RESULTS:
: 0
: 5

you of course also have the numpy method, however that requires the overhead of converting to a numpy array first:
#+begin_src jupyter-python :session mast-python
  range_list = list(range(6))
  print(np.argmin(range_list))
  print(np.argmax(range_list))
#+end_src

#+RESULTS:
: 0
: 5

** Exercise 26:

Create a 2D list with 1 on the border and 0 inside.

#+begin_src jupyter-python :session mast-python
  # note this program only works for odd n
  n = 3
  mat = np.ones((n,n))
  mat[n//2][n//2] = 0
  print(mat)
#+end_src

#+RESULTS:
: [[1. 1. 1.]
:  [1. 0. 1.]
:  [1. 1. 1.]]

** Exercise 27:

Find the unique values and their counts in a list.

#+begin_src jupyter-python :session mast-python
  l1 = list(range(6))
  l2 = list(range(2,7))
  l1.extend(l2)
  uniq = list(set(l1))
  counts = {x: l1.count(x) for x in l1}
  print(counts)
  print(uniq)
#+end_src

#+RESULTS:
: {0: 1, 1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1}
: [0, 1, 2, 3, 4, 5, 6]

** Exercise 28:

Create a 3x3 list of lists with values ranging from 0 to 8.

#+begin_src jupyter-python :session mast-python
  nums = list(range(9))
  ll_nums = [nums[x:x+3] for x in range(0,9,3)]
  print(ll_nums)
#+end_src

#+RESULTS:
: [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

** Exercise 29:

Calculate the exponential of all elements in a list.

#+begin_src jupyter-python :session mast-python
  import math
  nums = list(range(9))
  nums = [math.exp(x) for x in nums]
  print(nums)
#+end_src

#+RESULTS:
: [1.0, 2.718281828459045, 7.38905609893065, 20.085536923187668, 54.598150033144236, 148.4131591025766, 403.4287934927351, 1096.6331584284585, 2980.9579870417283]

** Exercise 30:

Swap two rows in a 2D list.

#+begin_src jupyter-python :session mast-python
  import random
  matrix = create_n_by_n_list(4)
  print(matrix)
  matrix[0], matrix[1] = matrix[1], matrix[0]
  print(matrix)
#+end_src

#+RESULTS:
: [[2, 2, 2, 0], [4, 2, 3, 4], [1, 1, 1, 3], [2, 0, 4, 2]]
: [[4, 2, 3, 4], [2, 2, 2, 0], [1, 1, 1, 3], [2, 0, 4, 2]]

** Exercise 31:

Create a random 3x3 list of lists and replace all values greater than 0.5 with 1 and all others with 0.

** Exercise 32:

Find the indices of the top N maximum values in a list.

** Exercise 33:

Calculate the mean of each column in a 2D list.

** Exercise 34:

Normalize the values in each column of a 2D list.

** Exercise 35:

Concatenate two lists.

** Exercise 36:

Create a 2D list with random values and sort each row.

** Exercise 37:

Check if all elements in a list are non-zero.

** Exercise 38:

Find the indices of the maximum value in each row of a 2D list.

** Exercise 39:

Create a 2D list and replace all nan values with the mean of the list.

** Exercise 40:

Calculate the mean of each row in a 2D list ignoring nan values.

** Exercise 41:

Compute the sum of diagonal elements in a 2D list.

** Exercise 42:

Convert radians to degrees for each element in a list.

** Exercise 43:

Calculate the pairwise Euclidean distance between two lists.

** Exercise 44:

Create a list and set the values between the 25th and 75th percentile to 0.

** Exercise 45:

Calculate the element-wise square of the difference between two lists.

** Exercise 46:

Replace all even numbers in a list with the next odd number.

** Exercise 47:

Create a 2D list and normalize each column by its range.

** Exercise 48:

Compute the cumulative sum of elements along a given axis in a 2D list.

** Exercise 49:

Check if any element in a list is non-zero.

** Exercise 50:

Create a 2D list with random integers and replace all values greater than a certain threshold with that threshold.

** Exercise 51:

Find the median of a list of numbers.

** Exercise 52:

Convert a list of numbers to a list of their logarithms.

** Exercise 53:

Find the mode of a list of numbers.

** Exercise 54:

Flatten a list of lists.

** Exercise 55:

Transpose a 2D list.

** Exercise 56:

Remove duplicates from a list while preserving order.

** Exercise 57:

Find the intersection of two lists.

** Exercise 58:

Merge two dictionaries.

** Exercise 59:

Sort a list of dictionaries by a key.

** Exercise 60:

Filter a dictionary based on its values.

** Exercise 61:

Create a dictionary from two lists.

** Exercise 62:

Find the maximum value in a dictionary.

** Exercise 63:

Invert a dictionary (swap keys and values).

** Exercise 64:

Create a dictionary with a default value.

** Exercise 65:

Convert a dictionary to a list of tuples.

** Exercise 66:

Find the length of the longest string in a list.

** Exercise 67:

Reverse the words in a sentence.

** Exercise 68:

Check if a string is a palindrome.

** Exercise 69:

Remove punctuation from a string.

** Exercise 70:

Count the occurrences of each character in a string.

** Exercise 71:

Find the longest common prefix among a list of strings.

** Exercise 72:

Convert a string to a list of characters.

** Exercise 73:

Generate a list of random integers.

** Exercise 74:

Shuffle a list.

** Exercise 75:

Generate a random password of a given length.

** Exercise 76:

Calculate the factorial of a number.

** Exercise 77:

Calculate the Fibonacci sequence up to a given number of terms.

** Exercise 78:

Check if a number is prime.

** Exercise 79:

Find the greatest common divisor (GCD) of two numbers.

** Exercise 80:

Find the least common multiple (LCM) of two numbers.

** Exercise 81:

Sort a list of tuples by the second element.

** Exercise 82:

Find the second largest number in a list.

** Exercise 83:

Check if a list is a palindrome.

** Exercise 84:

Find the sum of the digits of a number.

** Exercise 85:

Find the product of the digits of a number.

** Exercise 86:

Check if a string is a valid number.

** Exercise 87:

Find the length of the longest word in a sentence.

** Exercise 88:

Convert a list of tuples to a dictionary.

** Exercise 89:

Filter a list of dictionaries based on a key value.

** Exercise 90:

Sort a list of tuples by multiple keys.

** Exercise 91:

Merge two lists into a dictionary, using one as keys and the other as values.

** Exercise 92:

Create a dictionary with keys as numbers and values as their squares.

** Exercise 93:

Check if two strings are anagrams.

** Exercise 94:

Count the number of vowels in a string.

** Exercise 95:

Check if a string contains only digits.

** Exercise 96:

Find the first non-repeated character in a string.

** Exercise 97:

Reverse each word in a sentence.

** Exercise 98:

Generate a list of Fibonacci numbers up to a given number.

** Exercise 99:

Remove all whitespaces from a string.

** Exercise 100:

Replace all occurrences of a substring in a string.
