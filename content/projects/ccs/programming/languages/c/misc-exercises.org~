+++
title = "Miscellaneous Exercises over the years"
tags = ["misc", "tools"]
toc = "true"
clocal = "true"
+++

#+PROPERTY: dest /Users/aayushbajaj/Documents/new-site/static/code/ccs/programming/languages/100-days-python/mastery/

* Hexadecimal Converter

I think I made this for integration into Alfred. This needs to be refactored if you want to use it!

#+begin_src C :cmdline 16 255 :results output :tangle base-changer.c
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>

#define N_BITS 16

// Function declarations
void change_base(int base, int user_num);
char *convert_to_binary(int16_t value);

// Convert number to any base (2-36)
void change_base(int base, int user_num)
{
    int i = 0;
    int j = 0;
    int raised, ceiling, floored;
    int length = snprintf(NULL, 0, "%d", base);
    char base_name[20] = "";
    char output[55] = "";
    char floored_str[32] = "";
    char alphabet[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    
    for (raised = pow(base,i); user_num % raised < user_num; i++) {
        raised = pow(base, i);
        ceiling = i - 1;
    }
    
    for (j = ceiling; j > -1; j--) {
        floored = floor(user_num / pow(base, j));
        user_num -= floored*pow(base, j); 
        sprintf(floored_str, "%d", floored);
        if (floored > 9) {
            sprintf(floored_str, "%c", alphabet[floored - 10]);
        }    
        strcat(output, floored_str);
    }
    
    if (base == 2) strcpy(base_name, "Binary");
    else if (base == 16) strcpy(base_name, "Hexadecimal");
    else snprintf(base_name, length + 1, "%d", base);
    
    printf("<items><item uid=\"%s\" arg=\"%s\"><title>%s</title><subtitle></subtitle><icon>icon.png</icon></item></items>", base_name, output, output);
}

// Convert number to 16-bit binary
char *convert_to_binary(int16_t value) {
    char *buffer = malloc((N_BITS + 1) * sizeof(char));
    if (!buffer) {
        return NULL;
    }

    for (int i = 0; i < N_BITS; i++) {
        int16_t bit_mask = 1 << (N_BITS - i - 1);
        buffer[i] = (value & bit_mask) ? '1' : '0';
    }

    buffer[N_BITS] = '\0';
    return buffer;
}

void print_usage() {
    printf("Usage: %s <base> <number>\n", "base_changer");
    printf("\nBase must be between 2 and 36\n");
    printf("Number must be between 0 and 2147483647\n");
}

int main(int argc, char *argv[])
{
    if (argc != 3) {
        print_usage();
        return 1;
    }
    
    int base = atoi(argv[1]);
    int user_num = atoi(argv[2]);
    
    if (!(base >= 2 && base <= 36)) {
        print_usage();
        return 2;
    }
    if (user_num > 2147483647) {
        print_usage();
        return 2;
    }
    
    change_base(base, user_num);
    return 0;
}

#+end_src

** output
{{< collapse-local folded="true" >}}

#+RESULTS:
: <items><item uid="Hexadecimal" arg="FF"><title>FF</title><subtitle></subtitle><icon>icon.png</icon></item></items>

* Binary Converter

Same bullshit with this:

#+begin_src C :cmdline 42 -42 :results output :tangle binary-converter.c
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#define N_BITS 16

// Convert number to 16-bit binary
char *convert_to_binary(int16_t value) {
    char *buffer = malloc((N_BITS + 1) * sizeof(char));
    if (!buffer) {
        return NULL;
    }

    for (int i = 0; i < N_BITS; i++) {
        int16_t bit_mask = 1 << (N_BITS - i - 1);
        buffer[i] = (value & bit_mask) ? '1' : '0';
    }

    buffer[N_BITS] = '\0';
    return buffer;
}

void print_usage() {
    printf("Usage: %s <number> [number2 ...]\n", "binary_converter");
    printf("\nConvert numbers to 16-bit binary representation\n");
    printf("Each number must be between -32768 and 32767\n");
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        print_usage();
        return 1;
    }

    for (int arg = 1; arg < argc; arg++) {
        long l = strtol(argv[arg], NULL, 0);
        if (l < INT16_MIN || l > INT16_MAX) {
            print_usage();
            return 2;
        }
        int16_t value = l;

        char *bits = convert_to_binary(value);
        if (!bits) {
            return 3;
        }
        
        printf("<items><item uid=\"%s\" arg=\"%s\"><title>%s</title><subtitle></subtitle><icon>icon.png</icon></item></items>", bits, bits, bits);
        free(bits);
    }

    return 0;
} 
#+end_src


** output
{{< collapse-local folded="true" >}}

#+RESULTS:
: <items><item uid="0000000000101010" arg="0000000000101010"><title>0000000000101010</title><subtitle></subtitle><icon>icon.png</icon></item></items><items><item uid="1111111111010110" arg="1111111111010110"><title>1111111111010110</title><subtitle></subtitle><icon>icon.png</icon></item></items>


* Boxes

#+begin_src C :results output :tangle boxes.c
#include <stdio.h>

int main(void) {
    int boxes_num = 0, sides, row = 0, col = 0, i, j;
    printf("How many boxes: ");
    scanf("%d", &boxes_num);
    sides = 3+4*(boxes_num - 1);
    boxes_num = (sides + 1) / 2;
    while (row < sides) {
        while (col < sides) { 
            //do not fully understand the following 2 lines of logic.
            i = (row >= boxes_num) ? sides - row - 1: row;
            j = (col >= boxes_num) ? sides - col - 1 : col;
            if ((boxes_num - ((i < j) ? i : j))%2 == 0) printf("*");
            else printf("-");
            col++;
        }
        col = 0;
        row++;
        putchar ('\n');
    }
    return 0;
}

// this one was difficult. had to appropriate a few lines from stack

#+end_src


* Decimal Spiral

#+begin_src C :cmdline  :results output :tangle decimal-spiral.c
#include <stdio.h>

int value(int size, int row, int col) {
    // this is the quadratic equation which 
    // we will leverage to determine the digit values
    int quad = (size*size + 2* size - 3) / 2;
    // checking the first row
    if (row == 0) return quad - col;
    // checking second row
    else if (row == 1) {
        if (col == size - 1) return quad - col - 1;
    // this is the second-last row
    } else if (row == size - 2) {
        if (col == 0) return quad - 3*size + 2;
        else if (col == size - 1) return quad - 2*size + 3;
    // last row
    } else if (row == size - 1) return quad - 3*size + col + 3;
    // the rest
    else {
        if (col == 0) return quad - 4*size + row + 4;
        else if (col == 1) {
            if (row == 2) return quad - 4*size  + row + 3;
            else return -1;
        } else if (col == size - 1) return quad - size + 1 - row;
        else if (col == size - 2) return -1;
        else return value(size - 4, row - 2, col - 2);
    }
    return 0;
}

int draw(int size, int half) {
    // top half spiral. iterating through rows
    int row, col;
    for (row = 0; row < half; row++) {
        // deals with even rows in the top half
        if (row % 2) {
            // iterating through columns for each row
            for (col = 0; col < size; col++) {
                // logic. even columns are true. checks left / right side. 
                if (!(col % 2) && (col < row - 1 || col >= size - row)) {
                    printf("%d", value(size, row, col) % 10);
                }
                else {
                    putchar('-');
                }
            }
        }
        // deals with the odd rows in the top half
        else {
            // iterating through columns for each row 
            for (col = 0; col < size; col++) {
                // logic.
                if ((col % 2) && (col < row - 1 || col >= size - row)) {
                    putchar('-');
                }
                else {
                    printf("%d", value(size, row, col) % 10);
                }
            }
        }
        printf("\n");
    }
    // bottom half spiral
    for (; row < size; row++) {
        // deals with even rows
        if (row % 2) {
            // check cols. again these are the evens, but for the lower half.
            for (col = 0; col < size; col++) {
                // logic.
                if (!(col % 2) && (col < size - row || col > row)) {
                    printf("%d", value(size, row, col) % 10);
                }
                else {
                    putchar('-');
                }
            }
        }
        // deals with odd rows
        else {
            // check cols. again these are the odds, but for the lower half
            for (col = 0; col < size; col++) {
                // logic.
                if ((col % 2) && (col < size - row || col > row)) {
                    putchar('-');
                }
                else {
                    printf("%d", value(size, row, col) % 10);
                }
            }
        }
        printf("\n");
    } 
    return 0;
}

int main() {
    int spiral_size = 0;
    printf("Enter size: ");
    scanf("%d", &spiral_size);
    int half = (spiral_size / 2) + 1;
    draw(spiral_size, half);
}

// credits: i did use sabine's code to derive the quadratic
// I then used alex's code to understand how to peel back layers
// and then finally used some code from github to structure my layer logic
#+end_src

* Donut

#+begin_src C :cmdline  :results output :tangle donut.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
int main() {
    float A = 0, B = 0;
    float i, j;
    int k;
    float z[1760];
    char b[1760];
    printf("\x1b[2J");
    for(;;) {
        memset(b,32,1760);
        memset(z,0,7040);
        for(j=0; j < 6.28; j += 0.07) {
            for(i=0; i < 6.28; i += 0.02) {
                float c = sin(i);
                float d = cos(j);
                float e = sin(A);
                float f = sin(j);
                float g = cos(A);
                float h = d + 2;
                float D = 1 / (c * h * e + f * g + 5);
                float l = cos(i);
                float m = cos(B);
                float n = sin(B);
                float t = c * h * g - f * e;
                int x = 40 + 30 * D * (l * h * m - t * n);
                int y= 12 + 15 * D * (l * h * n + t * m);
                int o = x + 80 * y;
                int N = 8 * ((f * e - c * d * g) * m - c * d * e - f * g - l * d * n);
                if(22 > y && y > 0 && x > 0 && 80 > x && D > z[o]) {
                    z[o] = D;
                    b[o] = ".,-~:;=!*#$@"[N > 0 ? N : 0];
                }
            }
        }
        printf("\x1b[H");
        for(k = 0; k < 1761; k++) {
            putchar(k % 80 ? b[k] : 10);
            A += 0.00004;
            B += 0.00002;
        }
        usleep(30000);
    }
    return 0;
} 

#+end_src

** output
{{< collapse-local folded="true" >}}
* Easter Calculator

#+begin_src C :cmdline  :results output :tangle easter.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Endian Checker

#+begin_src C :cmdline  :results output :tangle endian.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* GCD (Greatest Common Divisor)

#+begin_src C :cmdline  :results output :tangle gcd.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Extended GCD

#+begin_src C :cmdline  :results output :tangle gcd-ext.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Is Amicable (number theory)

#+begin_src C :cmdline  :results output :tangle is-amicable.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Is Perfect

#+begin_src C :cmdline  :results output :tangle is-perfect.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Is Prime

#+begin_src C :cmdline  :results output :tangle is-prime.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Modulo Congruence

#+begin_src C :cmdline  :results output :tangle mod-cong.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Postfix Calculator

#+begin_src C :cmdline  :results output :tangle postfix-calc.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Powers of 2

#+begin_src C :cmdline  :results output :tangle powers-of-two.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Print bits

#+begin_src C :cmdline u 1 15 :results output :tangle print-bits.c
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>

void print_bits_unsigned(uint8_t bytes, int integer)
{
    int bits = bytes * 8;
    for (int i = bits - 1; i >= 0; i--) {
        printf("%d", (integer >> i) & 1);
    }
    printf("\n");
}

void print_bits_signed(uint8_t bytes, int integer)
{
    int bits = bytes * 8;
    for (int i = bits - 1; i >= 0; i--) {
        printf("%d", (integer >> i) & 1);
    }
    printf("\n");
}

int main(int argc, char *argv[])
{
    if (argc != 4) {
        fprintf(stderr, "Usage %s <u/s> <byte size> <int>\n", argv[0]);
        return 1;
    }

    char sign_type = argv[1][0];
    uint8_t bytes = atoi(argv[2]);
    int integer = atoi(argv[3]);

    if (sign_type == 'u') {
        print_bits_unsigned(bytes, integer);
    } else if (sign_type == 's') {
        print_bits_signed(bytes, integer);
    } else {
        fprintf(stderr, "Usage %s <u/s> <byte size> <int>\n", argv[0]);
        return 1;
    }

    return 0;
}
#+end_src
** output
{{< collapse-local folded="true" >}}
#+RESULTS:
: 00001111



* Print Primes

#+begin_src C :cmdline  :results output :tangle primes.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Sawtooth Diagram

#+begin_src C :cmdline  :results output :tangle sawtooth.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Sizeof Primitives

#+begin_src C :cmdline  :results output :tangle sizeof-primitives.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Squares

#+begin_src C :cmdline  :results output :tangle squares.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Turing Paint

#+begin_src C :cmdline  :results output :tangle turing-paint.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Uppercase

#+begin_src C :cmdline  :results output :tangle uppercase.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Vector Sum

#+begin_src C :cmdline  :results output :tangle vector-sum.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* Word Square

#+begin_src C :cmdline  :results output :tangle word-square.c

#+end_src
** output
{{< collapse-local folded="true" >}}
* X


#+begin_src C :cmdline  :results output :tangle x.c

#+end_src
** output
{{< collapse-local folded="true" >}}
